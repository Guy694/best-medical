generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./prisma/erd.svg"
}

/* ========================
   Users
   ======================== */
model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  address   String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())

  orders    Order[]
  cartItems CartItem[]
  reviews   Review[]
}

enum UserRole {
  CUSTOMER
  ADMIN
  STAFF
}

/* ========================
   Categories
   ======================== */
model Category {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(100)
  parentId  Int?
  cate_img    String?  @db.Text
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
}

/* ========================
   Products
   ======================== */
model Product {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(200)
  codename    String     @unique @db.VarChar(100)
  description String?
  price       Decimal    @db.Decimal(10,2)
  stock       Int
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  imageUrl    String?    @db.VarChar(255)
  createdAt   DateTime   @default(now())
  warranty    Int?
  property    Json

  cartItems         CartItem[]
  orderItems        OrderItem[]
  reviews           Review[]
  productPromotions ProductPromotion[]
}

/* ========================
   Cart Items
   ======================== */
model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

/* ========================
   Orders
   ======================== */
model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  totalPrice      Decimal     @db.Decimal(10,2)
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  createdAt       DateTime    @default(now())

  user       User       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payments   Payment[]
  shipping   Shipping?
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPING
  COMPLETED
  CANCELLED
}

/* ========================
   Promotions
   ======================== */
model Promotion {
  id        Int       @id @default(autoincrement())
  name      String
  discount  Float
  type      String    // percent | fixed
  startDate DateTime
  endDate   DateTime

  products  ProductPromotion[]
}

model ProductPromotion {
  id          Int       @id @default(autoincrement())
  productId   Int
  promotionId Int

  product     Product   @relation(fields: [productId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])
}

/* ========================
   Order Items
   ======================== */
model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10,2)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

/* ========================
   Payments
   ======================== */
model Payment {
  id      Int           @id @default(autoincrement())
  orderId Int
  method  PaymentMethod
  amount  Decimal       @db.Decimal(10,2)
  status  PaymentStatus @default(PENDING)
  slipUrl String?       @db.VarChar(255)
  paidAt  DateTime?

  order   Order         @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  PROMPTPAY
  COD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

/* ========================
   Shipping
   ======================== */
model Shipping {
  id             Int            @id @default(autoincrement())
  orderId        Int            @unique
  trackingNumber String?        @db.VarChar(100)
  provider       String?        @db.VarChar(100)
  status         ShippingStatus?
  updatedAt      DateTime       @default(now())

  order          Order          @relation(fields: [orderId], references: [id])
}

enum ShippingStatus {
  WAITING
  IN_TRANSIT
  DELIVERED
}

/* ========================
   Coupons
   ======================== */
model Coupon {
  id             Int      @id @default(autoincrement())
  code           String   @unique @db.VarChar(50)
  discountPercent Int
  expireDate     DateTime?
}

/* ========================
   Contact
   ======================== */
model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  article   String?
  detail    String?
  createdAt DateTime @default(now())
}

/* ========================
   Articles
   ======================== */
model Article {
  id       Int      @id @default(autoincrement())
  title    String
  content  String
  author   String
  banner   String
  createdAt DateTime @default(now())
}

/* ========================
   Reviews
   ======================== */
model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
